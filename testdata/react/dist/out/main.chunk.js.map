{"version":3,"sources":["webpack:///./src/App.js","webpack:///./src/Counter.jsx","webpack:///./src/Running.js","webpack:///./src/index.js"],"names":["App","Component","runForever","Counter","props","state","count","console","log","newval","setState","increment","num","setTimeout","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;IAEMA,G;;;;;;;;;;;;;6BACK;AACP,aAAS;AACP,mEAAC,gDAAD;AADF;AAGD;;;;EALeC,+C;;AAQlBC,2DAAU;AAEKF,kEAAf,E;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AAEO,IAAMG,OAAb;AAAA;AAAA;AAAA;;AAEE,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mYAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,WAAK,EAAE;AADI,KAAb;AAHiB;AAMlB;;AARH;AAAA;AAAA,gCAUgB;AACVC,aAAO,CAACC,GAAR,CAAY,MAAZ,EADU,CACW;;AACrB,UAAMC,MAAM,GAAG,KAAKJ,KAAL,CAAWC,KAAX,GAAmB,CAAlC;AACA,WAAKI,QAAL,CAAc;AAAEJ,aAAK,EAAEG;AAAT,OAAd;AACD;AAdL;AAAA;AAAA,6BAgBa;AAAA;;AACP,aACE;AAAK,iBAAS,EAAC;AAAf,2BACiB,KAAKJ,KAAL,CAAWC,KAD5B,OAEE,wEACE;AAAQ,UAAE,EAAC,cAAX;AAA0B,eAAO,EAAG;AAAA,iBAAM,MAAI,CAACK,SAAL,EAAN;AAAA;AAApC,qBADF,CAFF,CADF;AAQD;AAzBL;;AAAA;AAAA,EAA6BV,+CAA7B,E;;;;;;;;;;;;ACFA;AAAA;AAAA;AAEA,IAAIW,GAAG,GAAG,CAAV;AACO,SAASV,UAAT,GAAsB;AACzBW,YAAU,CAAC,YAAM;AACbD,OAAG;AACHV,cAAU;AACb,GAHS,EAGP,EAHO,CAAV;AAIH,C;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEAY,gDAAQ,CAACC,MAAT,CAAgB,2DAAC,4CAAD,OAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E","file":"out/main.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Counter } from './Counter';\nimport { runForever } from './Running';\n\nclass App extends Component {\n  render() {\n    return ( // bpLabel: react_App_render\n      <Counter ></Counter>\n    );\n  }\n}\n\nrunForever();\n\nexport default App;\n","\r\nimport React, { Component } from 'react';\r\n\r\nexport class Counter extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n    increment() {\r\n      console.log('blub'); // bpLabel: react_Counter_increment\r\n      const newval = this.state.count + 1 ;\r\n      this.setState({ count: newval });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"shopping-list\">\r\n          Click count = {this.state.count};\r\n          <div>\r\n            <button id=\"incrementBtn\" onClick={ () => this.increment() } >Increment</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n","\r\n// a script to keep running forever\r\n\r\nlet num = 0;\r\nexport function runForever() {\r\n    setTimeout(() => {\r\n        num++;\r\n        runForever();\r\n    }, 50);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}